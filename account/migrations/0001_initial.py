# Generated by Django 3.2.9 on 2021-11-18 18:47

import account.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='사용자 아이디')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gps_module_info', models.CharField(max_length=100, verbose_name='GPS 모듈 정보')),
                ('camera_module_info', models.CharField(max_length=100, verbose_name='카메라 모듈 정보')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='기기 소유주')),
            ],
            options={
                'db_table': 'device_info_list',
            },
        ),
        migrations.CreateModel(
            name='Serial',
            fields=[
                ('serial_number', models.CharField(max_length=50, primary_key=True, serialize=False, verbose_name='서버에 등록된 시리얼 넘버')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='등록 날짜')),
                ('deleted_date', models.DateTimeField(null=True, verbose_name='만료 날짜')),
            ],
            options={
                'db_table': 'serial_number_list',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.CharField(default='N', max_length=1, verbose_name='디바이스 모드 normal/emergency')),
                ('latitude', models.FloatField(default=0.0, verbose_name='위도')),
                ('longitude', models.FloatField(default=0.0, verbose_name='경도')),
                ('altitude', models.FloatField(default=0.0, verbose_name='고도')),
                ('latest_updated_time', models.DateTimeField(auto_now=True, verbose_name='최근 업데이트한 시간')),
                ('ONF', models.BooleanField(default=True, verbose_name='디바이스 On/Off 상태 정보')),
                ('IP', models.GenericIPAddressField(null=True, verbose_name='IP정보')),
                ('device_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status', to='account.device', unique=True)),
            ],
            options={
                'db_table': 'device_status_list',
            },
        ),
        migrations.AddField(
            model_name='device',
            name='serial_number',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device', to='account.serial', unique=True),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tyep', models.CharField(choices=[('video', 'Video'), ('audio', 'Audio'), ('image', 'Image'), ('other', 'Other')], max_length=10)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('recorded_path', models.FileField(upload_to=account.models.Attachment.file_path_for_db)),
                ('device_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='account.device', verbose_name='등록 기기')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner user')),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('protector', 'Protector'), ('protege', 'Protege'), ('observer', 'Observer'), ('other', 'Other')], max_length=10)),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='생성날짜')),
                ('modified_date', models.DateTimeField(auto_now=True, verbose_name='수정날짜')),
                ('device_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permission_device_id', to='account.device', verbose_name='기기에 연결된 디바이스')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permission_user_id', to='account.device', verbose_name='기기에 연결된 사용자')),
            ],
            options={
                'db_table': 'permission_list',
                'unique_together': {('user_id', 'device_id')},
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('status_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='account.status')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='history테이블에 기록된 시간')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'device_status_history_list',
                'unique_together': {('user_id', 'created_time')},
            },
            bases=('account.status',),
        ),
    ]
